/***************************** Include Files *******************************/
#include "xparameters.h"
#include "xil_printf.h"
#include "xstatus.h"
#include "xil_cache.h"
#include "xil_io.h"
#include "sha3_1003_tIP1.h"

/************************** Constant Definitions ***************************/
#define IP_CORE_BASEADDR XPAR_SHA3_1003_TIP1_0_S0_AXI_BASEADDR
#define REG_CONTROL_OFFSET      0x00
#define REG_DIN_LOW_OFFSET      0x04
#define REG_DIN_HIGH_OFFSET     0x08
#define REG_CONTROL2_OFFSET     0x0C
#define REG_STATUS_OFFSET       0x10
#define REG_RESULT_START_OFFSET 0x14
#define CONTROL_START_BIT       (1 << 3)
#define CONTROL2_LAST_DIN_BIT   (1 << 0)
#define CONTROL2_DIN_VALID_BIT  (1 << 5)
#define CONTROL2_DOUT_READY_BIT (1 << 6)
#define STATUS_RESULT_READY_BIT (1 << 5)
#define RESULT_REG_COUNT 42

/************************** Function Prototypes ****************************/
void init_platform();
void cleanup_platform();
int run_sha_test(u32 base_addr, u32 high_data, u32 low_data, int byte_count);

/*****************************************************************************/
int main()
{
    init_platform();

    xil_printf("\r\n--- SHA3 IP Core - 终极硬件逻辑诊断 ---\r\n");

    // --- 测试A: 高位非零 ---
    xil_printf("\r\n--- 测试 A: high_32 非零 ---\r\n");
    run_sha_test(IP_CORE_BASEADDR, 0xAAAAAAAA, 0xBBBBBBBB, 8);

    // --- 测试B: 高位为零 ---
    xil_printf("\r\n--- 测试 B: high_32 为零 ---\r\n");
    run_sha_test(IP_CORE_BASEADDR, 0x00000000, 0xBBBBBBBB, 8);

    // --- 测试C: 原始"abc"测试 ---
    xil_printf("\r\n--- 测试 C: 原始 'abc' (high_32 非零) ---\r\n");
    run_sha_test(IP_CORE_BASEADDR, 0x00636261, 0x00000000, 3);

    // --- 测试D: 调换后"abc"测试 ---
    xil_printf("\r\n--- 测试 D: 调换后 'abc' (high_32 为零) ---\r\n");
    run_sha_test(IP_CORE_BASEADDR, 0x00000000, 0x00636261, 3);


    cleanup_platform();
    return 0;
}

/*****************************************************************************/
int run_sha_test(u32 base_addr, u32 high_data, u32 low_data, int byte_count)
{
    u32 status_reg;
    u32 result_buffer[RESULT_REG_COUNT];
    int i;
    int timeout = 1000000;

    xil_printf("步骤 1: 写入数据 (高: 0x%08X, 低: 0x%08X)\r\n", high_data, low_data);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_DIN_HIGH_OFFSET, high_data);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_DIN_LOW_OFFSET, low_data);

    // 立即读回并打印，进行交叉验证
    u32 read_high = SHA3_1003_TIP1_mReadReg(base_addr, REG_DIN_HIGH_OFFSET);
    u32 read_low = SHA3_1003_TIP1_mReadReg(base_addr, REG_DIN_LOW_OFFSET);
    xil_printf("  >> 读回验证: slv_reg2=0x%08X, slv_reg1=0x%08X\r\n", read_high, read_low);
    if (read_high != high_data || read_low != low_data) {
        xil_printf("  >> [严重错误] 读写不一致！问题出在AXI总线或构建流程！\r\n");
    }

    u32 control2_val = CONTROL2_LAST_DIN_BIT | (byte_count << 1) | CONTROL2_DOUT_READY_BIT;
    xil_printf("步骤 2: 设置 slv_reg3 (值为 0x%08X), 有效字节数=%d\r\n", control2_val, byte_count);

    u32 control_val = 1; // 模式1: Shake-256
    xil_printf("步骤 3: 设置模式为 Shake-256 并启动\r\n");

    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL_OFFSET, control_val);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL2_OFFSET, control2_val);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL_OFFSET, control_val | CONTROL_START_BIT);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL2_OFFSET, control2_val | CONTROL2_DIN_VALID_BIT);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL_OFFSET, control_val);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL2_OFFSET, control2_val);

    xil_printf("步骤 4: 等待计算完成...\r\n");
    do {
        status_reg = SHA3_1003_TIP1_mReadReg(base_addr, REG_STATUS_OFFSET);
        timeout--;
    } while (((status_reg & STATUS_RESULT_READY_BIT) == 0) && (timeout > 0));

    if (timeout <= 0) {
        xil_printf("  - [错误] 等待超时! 状态寄存器: 0x%08X\r\n", status_reg);
        return -1;
    }
    xil_printf("  - 计算完成! 状态寄存器: 0x%08X\r\n", status_reg);

    xil_printf("--- 哈希结果 ---\r\n");
    for (i = 0; i < RESULT_REG_COUNT; i++) {
        result_buffer[i] = SHA3_1003_TIP1_mReadReg(base_addr, REG_RESULT_START_OFFSET + i * 4);
        xil_printf("    reg[%2d]: 0x%08X\r\n", i, result_buffer[i]);
    }
    return 0;
}

/*****************************************************************************/
void init_platform()
{
    Xil_ICacheEnable();
    Xil_DCacheEnable();
}

/*****************************************************************************/
void cleanup_platform()
{
    Xil_DCacheDisable();
    Xil_ICacheDisable();
}
