/*
 * main.c (最终完整版：包含所有辅助函数)
 *
 * 功能:
 * 1. 纯软件基准测试 (签名 + 验证 + 计时)
 * 2. 纯硬件加速测试 (签名 + 验证 + 计时)
 * 3. 交叉验证 (软签->硬验, 硬签->软验) 以确保功能完全兼容
 * 4. 打印详细的性能对比报告
 */
#include <stdio.h>
#include <string.h>
#include "xil_printf.h"
#include "xstatus.h"
#include "xtime_l.h"         // 引入 Zynq 的计时库
#include "xparameters.h"     // 包含处理器时钟频率等宏定义
#include "xil_cache.h"       // 包含缓存控制函数

#include "api.h"
#include "fips202.h"
#include "randombytes.h"

#define MLEN 32 // 消息长度

// --- 函数原型 ---
void print_hex(const char *label, const unsigned char *data, size_t len);
void init_platform();
void cleanup_platform();

int main()
{
    init_platform();
    xil_printf("\r\n--- SPHINCS+ SW/HW Full-Flow Verification & Benchmarking ---\r\n");

    int final_status = XST_SUCCESS;
    XTime t_start, t_end;
    u64 sw_sign_ticks, sw_verify_ticks, hw_sign_ticks, hw_verify_ticks;

    // --- 为了避免 PS 栈溢出，所有大数据都使用静态内存 ---
    static unsigned char pk[CRYPTO_PUBLICKEYBYTES];
    static unsigned char sk[CRYPTO_SECRETKEYBYTES];
    static unsigned char m[MLEN];
    static unsigned char sm[CRYPTO_BYTES + MLEN];
    static unsigned char mout[CRYPTO_BYTES + MLEN];
    unsigned long long smlen, mlen_out;

    // 生成一条固定的随机消息用于所有测试
    randombytes(m, MLEN);
    xil_printf("A %d-byte random message has been generated for all tests.\r\n", MLEN);
    print_hex("  Message (m)", m, MLEN);

    // ===================================================================
    //  测试流程 1: 纯软件基准测试 (SW -> SW)
    // ===================================================================
    xil_printf("\r\n--- Flow 1: Pure Software Signing and Verification (Baseline) ---\r\n");
    use_sw_shake_for_sphincs(); // **切换到软件**

    // 计时签名
    XTime_GetTime(&t_start);
    if (crypto_sign_keypair(pk, sk) != 0 || crypto_sign(sm, &smlen, m, MLEN, sk) != 0) {
        xil_printf("  [FAIL] SW signing process failed.\r\n");
        cleanup_platform();
        return XST_FAILURE;
    }
    XTime_GetTime(&t_end);
    sw_sign_ticks = t_end - t_start;
    xil_printf("  [INFO] SW Signing (incl. keygen) took: %llu clock cycles.\r\n", sw_sign_ticks);
    print_hex("    -> Generated PK (first 16 bytes)", pk, 16);
    print_hex("    -> Generated Signature (first 32 bytes)", sm, 32);


    // 计时验证
    XTime_GetTime(&t_start);
    int sw_verify_result = crypto_sign_open(mout, &mlen_out, sm, smlen, pk);
    XTime_GetTime(&t_end);
    sw_verify_ticks = t_end - t_start;
    xil_printf("  [INFO] SW Verification took: %llu clock cycles.\r\n", sw_verify_ticks);

    if (sw_verify_result != 0) {
        xil_printf("  [FAIL] SW verification function returned an error!\r\n");
        final_status = XST_FAILURE;
    } else if (mlen_out != MLEN || memcmp(m, mout, MLEN) != 0) {
        xil_printf("  [FAIL] SW recovered message does not match original!\r\n");
        final_status = XST_FAILURE;
    } else {
        xil_printf("  [SUCCESS] SW signing and verification are internally consistent.\r\n");
    }


    // ===================================================================
    //  测试流程 2: 纯硬件加速测试 (HW -> HW)
    // ===================================================================
    xil_printf("\r\n--- Flow 2: Pure Hardware-Accelerated Signing and Verification ---\r\n");
    use_hw_shake_for_sphincs(); // **切换到硬件**

    // 计时签名
    XTime_GetTime(&t_start);
    if (crypto_sign_keypair(pk, sk) != 0 || crypto_sign(sm, &smlen, m, MLEN, sk) != 0) {
        xil_printf("  [FAIL] HW signing process failed.\r\n");
        cleanup_platform();
        return XST_FAILURE;
    }
    XTime_GetTime(&t_end);
    hw_sign_ticks = t_end - t_start;
    xil_printf("  [INFO] HW Signing (incl. keygen) took: %llu clock cycles.\r\n", hw_sign_ticks);
    print_hex("    -> Generated PK (first 16 bytes)", pk, 16);
    print_hex("    -> Generated Signature (first 32 bytes)", sm, 32);


    // 计时验证
    XTime_GetTime(&t_start);
    int hw_verify_result = crypto_sign_open(mout, &mlen_out, sm, smlen, pk);
    XTime_GetTime(&t_end);
    hw_verify_ticks = t_end - t_start;
    xil_printf("  [INFO] HW Verification took: %llu clock cycles.\r\n", hw_verify_ticks);

    if (hw_verify_result != 0) {
        xil_printf("  [FAIL] HW verification function returned an error!\r\n");
        final_status = XST_FAILURE;
    } else if (mlen_out != MLEN || memcmp(m, mout, MLEN) != 0) {
        xil_printf("  [FAIL] HW recovered message does not match original!\r\n");
        final_status = XST_FAILURE;
    } else {
        xil_printf("  [SUCCESS] HW signing and verification are internally consistent.\r\n");
    }

    // ===================================================================
    //  交叉验证 (保持不变，作为最终的功能正确性保障)
    // ===================================================================
    xil_printf("\r\n--- Flow 3 & 4: Cross-Verification for Compatibility ---\r\n");
    // SW -> HW
    use_sw_shake_for_sphincs();
    crypto_sign(sm, &smlen, m, MLEN, sk);
    use_hw_shake_for_sphincs();
    if (crypto_sign_open(mout, &mlen_out, sm, smlen, pk) != 0) {
        xil_printf("  [FAIL] Cross-Verification (SW Sign -> HW Verify) FAILED!\r\n");
        final_status = XST_FAILURE;
    } else {
        xil_printf("  [SUCCESS] Cross-Verification (SW Sign -> HW Verify) PASSED.\r\n");
    }
    // HW -> SW
    use_hw_shake_for_sphincs();
    crypto_sign(sm, &smlen, m, MLEN, sk);
    use_sw_shake_for_sphincs();
    if (crypto_sign_open(mout, &mlen_out, sm, smlen, pk) != 0) {
        xil_printf("  [FAIL] Cross-Verification (HW Sign -> SW Verify) FAILED!\r\n");
        final_status = XST_FAILURE;
    } else {
        xil_printf("  [SUCCESS] Cross-Verification (HW Sign -> SW Verify) PASSED.\r\n");
    }


    // ===================================================================
    //  最终性能对比报告
    // ===================================================================
    xil_printf("\r\n\n--- Final Performance Report ---\r\n");
    // 打印原始时钟周期数
    xil_printf(" - SW Signing:     %llu cycles\r\n", sw_sign_ticks);
    xil_printf(" - HW Signing:     %llu cycles\r\n", hw_sign_ticks);
    xil_printf(" - SW Verification:  %llu cycles\r\n", sw_verify_ticks);
    xil_printf(" - HW Verification:  %llu cycles\r\n", hw_verify_ticks);

    // 计算并打印性能提升倍数
    if (hw_sign_ticks > 0) {
        float sign_speedup = (float)sw_sign_ticks / hw_sign_ticks;
        // 使用浮点数打印需要链接数学库，并可能需要在 Vitis 中设置
        printf("  => Signing Performance Speed-up: %.2f X\r\n", sign_speedup);
    }
    if (hw_verify_ticks > 0) {
        float verify_speedup = (float)sw_verify_ticks / hw_verify_ticks;
        printf("  => Verification Performance Speed-up: %.2f X\r\n", verify_speedup);
    }

    // 同时打印以毫秒为单位的时间
    #ifdef XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ
        double cpu_freq_mhz = (double)XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ / 1000000.0;
        xil_printf("\r\n--- Time in Milliseconds (assuming %.0f MHz CPU clock) ---\r\n", cpu_freq_mhz);
        printf(" - SW Signing:     %.2f ms\r\n", (double)sw_sign_ticks / (cpu_freq_mhz * 1000.0));
        printf(" - HW Signing:     %.2f ms\r\n", (double)hw_sign_ticks / (cpu_freq_mhz * 1000.0));
        printf(" - SW Verification:  %.2f ms\r\n", (double)sw_verify_ticks / (cpu_freq_mhz * 1000.0));
        printf(" - HW Verification:  %.2f ms\r\n", (double)hw_verify_ticks / (cpu_freq_mhz * 1000.0));
    #endif


    if (final_status == XST_SUCCESS) {
        xil_printf("\r\n[FINAL CONCLUSION: ALL PASSED] Functionality is correct and performance data has been collected.\r\n");
    } else {
        xil_printf("\r\n[FINAL CONCLUSION: FAILED] A functional verification step failed. Performance data may be invalid.\r\n");
    }

    cleanup_platform();
    return final_status;
}


/******************************************************************************
*
* 辅助函数实现
*
******************************************************************************/

/**
 * @brief 打印十六进制数据
 */
void print_hex(const char *label, const unsigned char *data, size_t len) {
    xil_printf("%s", label);
    for (size_t i = 0; i < len; i++) {
        xil_printf("%02x", data[i]);
    }
    xil_printf("\r\n");
}

/**
 * @brief 初始化平台 (例如，开启缓存)
 */
void init_platform()
{
    /* 使能指令缓存 */
    Xil_ICacheEnable();

    /* 使能数据缓存 */
    Xil_DCacheEnable();

    xil_printf("Platform initialized (Caches Enabled)\r\n");
}

/**
 * @brief 清理平台 (例如，关闭缓存)
 */
void cleanup_platform()
{
    /* 关闭数据缓存 */
    Xil_DCacheDisable();

    /* 关闭指令缓存 */
    Xil_ICacheDisable();

    xil_printf("Platform cleaned up (Caches Disabled)\r\n");
}
