/***************************** Include Files *******************************/
#include "xparameters.h"
#include "xil_printf.h"
#include "xstatus.h"
#include "xil_cache.h"
#include "xil_io.h"
#include "sha3_1003_tIP1.h"

/************************** Constant Definitions ***************************/
#define IP_CORE_BASEADDR XPAR_SHA3_1003_TIP1_0_S0_AXI_BASEADDR
#define REG_CONTROL_OFFSET      0x00
#define REG_DIN_LOW_OFFSET      0x04
#define REG_DIN_HIGH_OFFSET     0x08
#define REG_CONTROL2_OFFSET     0x0C
#define REG_STATUS_OFFSET       0x10
#define REG_RESULT_START_OFFSET 0x14
#define CONTROL_START_BIT       (1 << 3)
#define CONTROL2_LAST_DIN_BIT   (1 << 0)
#define CONTROL2_DIN_VALID_BIT  (1 << 5)
#define CONTROL2_DOUT_READY_BIT (1 << 6)
#define STATUS_RESULT_READY_BIT (1 << 5)
#define RESULT_REG_COUNT 42

/************************** Function Prototypes ****************************/
void init_platform();
void cleanup_platform();
int validation_test(u32 base_addr);

/*****************************************************************************/
int main()
{
    init_platform();
    xil_printf("\r\n--- SHA3 IP Core - 验证'Start复位'猜想测试 ---\r\n");
    validation_test(IP_CORE_BASEADDR);
    cleanup_platform();
    return 0;
}

/*****************************************************************************/
/**
* @brief    通过改变时序，验证 start_i 是否错误地复位了 keccak_top
*
* @param    base_addr 是IP核的基地址。
*
* @return   - XST_SUCCESS: 成功 / - XST_FAILURE: 失败
******************************************************************************/
int validation_test(u32 base_addr)
{
    u32 high_32 = 0xAAAAAAAA;
    u32 low_data = 0xBBBBBBBB;
    int byte_count = 8;
    u32 status_reg;
    u32 result_buffer[RESULT_REG_COUNT];
    int i;
    int timeout = 1000000;

    xil_printf("\r\n--- 验证测试开始, 输入: 0xAAAAAAAA_BBBBBBBB ---\r\n");
    xil_printf("步骤 1: 写入数据 (高: 0x%08X, 低: 0x%08X)\r\n", high_32, low_data);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_DIN_HIGH_OFFSET, high_32);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_DIN_LOW_OFFSET, low_data);

    u32 control2_val = CONTROL2_LAST_DIN_BIT | (byte_count << 1) | CONTROL2_DOUT_READY_BIT;
    xil_printf("步骤 2: 设置 slv_reg3 (值为 0x%08X)\r\n", control2_val);

    u32 control_val = 1; // 模式1: Shake-256
    xil_printf("步骤 3: 【验证时序】先发送极短的Start脉冲, 再发送din_valid\r\n");

    // 3.1: 准备稳定状态
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL_OFFSET, control_val);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL2_OFFSET, control2_val);

    // 3.2: 发送一个极短的'start'脉冲来“点火” shake_top 状态机
    // 这个脉冲同时也会短暂地复位 keccak_top
    xil_printf("  - 发送Start“点火”脉冲...\r\n");
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL_OFFSET, control_val | CONTROL_START_BIT);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL_OFFSET, control_val); // 立即拉低!

    // 3.3: 在'start'脉冲结束后, keccak_top解除了复位。此时再发送din_valid
    xil_printf("  - 发送din_valid信号...\r\n");
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL2_OFFSET, control2_val | CONTROL2_DIN_VALID_BIT);
    SHA3_1003_TIP1_mWriteReg(base_addr, REG_CONTROL2_OFFSET, control2_val); // din_valid也用脉冲

    xil_printf("步骤 4: 等待计算完成...\r\n");
    do {
        status_reg = SHA3_1003_TIP1_mReadReg(base_addr, REG_STATUS_OFFSET);
        timeout--;
    } while (((status_reg & STATUS_RESULT_READY_BIT) == 0) && (timeout > 0));

    if (timeout <= 0) {
        xil_printf("  - [错误] 等待超时! 状态寄存器: 0x%08X\r\n", status_reg);
        return -1;
    }
    xil_printf("  - 计算完成! 状态寄存器: 0x%08X\r\n", status_reg);

    xil_printf("--- 哈希结果 ---\r\n");
    for (i = 0; i < RESULT_REG_COUNT; i++) {
        result_buffer[i] = SHA3_1003_TIP1_mReadReg(base_addr, REG_RESULT_START_OFFSET + i * 4);
        xil_printf("    reg[%2d]: 0x%08X\r\n", i, result_buffer[i]);
    }
    return 0;
}

/*****************************************************************************/
void init_platform() { Xil_ICacheEnable(); Xil_DCacheEnable(); }
void cleanup_platform() { Xil_DCacheDisable(); Xil_ICacheDisable(); }
