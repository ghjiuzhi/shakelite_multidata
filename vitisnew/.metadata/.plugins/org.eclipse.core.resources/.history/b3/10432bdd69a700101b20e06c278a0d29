/*
 * main.c (最终完整版 V3 - 修正64位整数打印，增加详细注释)
 */
#include <stdio.h>
#include <string.h>
#include "xil_printf.h"
#include "xstatus.h"
#include "xtime_l.h"
#include "xparameters.h"
#include "xil_cache.h"

#include "api.h"
#include "fips202.h"
#include "randombytes.h"

#define MLEN 32

// 函数原型
void print_hex(const char *label, const unsigned char *data, size_t len);
void init_platform();
void cleanup_platform();


int main()
{
    init_platform();
    xil_printf("\r\n--- SPHINCS+ SW/HW Full-Flow Verification & Benchmarking ---\r\n");

    int final_status = XST_SUCCESS;
    XTime t_start, t_end;
    u64 sw_sign_ticks = 0, sw_verify_ticks = 0, hw_sign_ticks = 0, hw_verify_ticks = 0;

    static unsigned char pk_sw[CRYPTO_PUBLICKEYBYTES];
    static unsigned char sk_sw[CRYPTO_SECRETKEYBYTES];
    static unsigned char m[MLEN];
    static unsigned char sm_sw[CRYPTO_BYTES + MLEN];
    static unsigned char mout_hw[CRYPTO_BYTES + MLEN];

    static unsigned char pk_hw[CRYPTO_PUBLICKEYBYTES];
    static unsigned char sk_hw[CRYPTO_SECRETKEYBYTES];
    static unsigned char sm_hw[CRYPTO_BYTES + MLEN];
    static unsigned char mout_sw[CRYPTO_BYTES + MLEN];

    unsigned long long smlen, mlen_out;

    randombytes(m, MLEN);
    xil_printf("A %d-byte random message has been generated for all tests.\r\n", MLEN);
    print_hex("  Message (m)", m, MLEN);

    // ===================================================================
    //  Flow 1: Pure Software Baseline (SW -> SW)
    // ===================================================================
    xil_printf("\r\n--- Flow 1: Pure Software Signing and Verification (Baseline) ---\r\n");
    use_sw_shake_for_sphincs();

    XTime_GetTime(&t_start);
    crypto_sign_keypair(pk_sw, sk_sw);
    crypto_sign(sm_sw, &smlen, m, MLEN, sk_sw);
    XTime_GetTime(&t_end);
    sw_sign_ticks = t_end - t_start;
    xil_printf("  [INFO] SW Signing (incl. keygen) took: %llu clock cycles.\r\n", sw_sign_ticks);
    print_hex("    -> Generated SW PK (first 16 bytes)", pk_sw, 16);
    print_hex("    -> Generated SW Signature (first 32 bytes)", sm_sw, 32);

    XTime_GetTime(&t_start);
    int sw_verify_result = crypto_sign_open(mout_sw, &mlen_out, sm_sw, smlen, pk_sw);
    XTime_GetTime(&t_end);
    sw_verify_ticks = t_end - t_start;
    xil_printf("  [INFO] SW Verification took: %llu clock cycles.\r\n", sw_verify_ticks);

    if (sw_verify_result != 0 || mlen_out != MLEN || memcmp(m, mout_sw, MLEN) != 0) {
        xil_printf("  [FAIL] SW signing and verification are NOT internally consistent.\r\n");
        final_status = XST_FAILURE;
    } else {
        xil_printf("  [SUCCESS] SW signing and verification are internally consistent.\r\n");
    }

    // ===================================================================
    //  Flow 2: Pure Hardware Accelerated Test (HW -> HW)
    // ===================================================================
    xil_printf("\r\n--- Flow 2: Pure Hardware-Accelerated Signing and Verification ---\r\n");
    use_hw_shake_for_sphincs();

    XTime_GetTime(&t_start);
    crypto_sign_keypair(pk_hw, sk_hw);
    crypto_sign(sm_hw, &smlen, m, MLEN, sk_hw);
    XTime_GetTime(&t_end);
    hw_sign_ticks = t_end - t_start;
    xil_printf("  [INFO] HW Signing (incl. keygen) took: %llu clock cycles.\r\n", hw_sign_ticks);
    print_hex("    -> Generated HW PK (first 16 bytes)", pk_hw, 16);
    print_hex("    -> Generated HW Signature (first 32 bytes)", sm_hw, 32);

    XTime_GetTime(&t_start);
    int hw_verify_result = crypto_sign_open(mout_hw, &mlen_out, sm_hw, smlen, pk_hw);
    XTime_GetTime(&t_end);
    hw_verify_ticks = t_end - t_start;
    xil_printf("  [INFO] HW Verification took: %llu clock cycles.\r\n", hw_verify_ticks);

    if (hw_verify_result != 0 || mlen_out != MLEN || memcmp(m, mout_hw, MLEN) != 0) {
        xil_printf("  [FAIL] HW signing and verification are NOT internally consistent.\r\n");
        final_status = XST_FAILURE;
    } else {
        xil_printf("  [SUCCESS] HW signing and verification are internally consistent.\r\n");
    }

    // ===================================================================
    //  Flow 3 & 4: Cross-Verification for Compatibility
    // ===================================================================
    xil_printf("\r\n--- Flow 3 & 4: Cross-Verification for Compatibility ---\r\n");

    // SW Sign (using SW keys) -> HW Verify
    use_hw_shake_for_sphincs();
    if (crypto_sign_open(mout_hw, &mlen_out, sm_sw, smlen, pk_sw) != 0) {
        xil_printf("  [FAIL] Cross-Verification (SW Sign -> HW Verify) FAILED!\r\n");
        final_status = XST_FAILURE;
    } else {
        xil_printf("  [SUCCESS] Cross-Verification (SW Sign -> HW Verify) PASSED.\r\n");
    }

    // HW Sign (using HW keys) -> SW Verify
    use_sw_shake_for_sphincs();
    if (crypto_sign_open(mout_sw, &mlen_out, sm_hw, smlen, pk_hw) != 0) {
        xil_printf("  [FAIL] Cross-Verification (HW Sign -> SW Verify) FAILED!\r\n");
        final_status = XST_FAILURE;
    } else {
        xil_printf("  [SUCCESS] Cross-Verification (HW Sign -> SW Verify) PASSED.\r\n");
    }


    // ===================================================================
    //  Final Performance Report
    // ===================================================================
    xil_printf("\r\n\n--- Final Performance Report ---\r\n");
    xil_printf("NOTE: 'cycles' are raw 64-bit timer ticks. 'ms' is calculated time.\r\n");

    // 使用 `%llu` 再次尝试，在较新的 BSP 中可能已经支持。如果仍然显示为0或10，请看下面的毫秒数。
    xil_printf(" - SW Signing:     %llu cycles\r\n", sw_sign_ticks);
    xil_printf(" - HW Signing:     %llu cycles\r\n", hw_sign_ticks);
    xil_printf(" - SW Verification:  %llu cycles\r\n", sw_verify_ticks);
    xil_printf(" - HW Verification:  %llu cycles\r\n", hw_verify_ticks);

    // 计算并打印性能提升倍数
    if (hw_sign_ticks > 0) {
        float sign_speedup = (float)sw_sign_ticks / hw_sign_ticks;
        printf("  => Signing Performance Speed-up: %.2f X\r\n", sign_speedup);
    }
    if (hw_verify_ticks > 0) {
        float verify_speedup = (float)sw_verify_ticks / hw_verify_ticks;
        printf("  => Verification Performance Speed-up: %.2f X\r\n", verify_speedup);
    }

    // 同时打印以毫秒为单位的时间，这个数据通常更可靠
    #if defined(XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ)
        const double CPU_FREQ_MHZ = (double)XPAR_CPU_CORTEXA9_0_CPU_CLK_FREQ_HZ / 1000000.0;
    #elif defined(XPAR_PSU_CORTEXA53_0_CPU_CLK_FREQ_HZ)
        const double CPU_FREQ_MHZ = (double)XPAR_PSU_CORTEXA53_0_CPU_CLK_FREQ_HZ / 1000000.0;
    #else
        const double CPU_FREQ_MHZ = 1.0; // 如果找不到频率定义，默认为1，避免除零
    #endif

    xil_printf("\r\n--- Time in Milliseconds (assuming %.0f MHz CPU clock) ---\r\n", CPU_FREQ_MHZ);
    printf(" - SW Signing:     %.3f ms\r\n", (double)sw_sign_ticks / (CPU_FREQ_MHZ * 1000.0));
    printf(" - HW Signing:     %.3f ms\r\n", (double)hw_sign_ticks / (CPU_FREQ_MHZ * 1000.0));
    printf(" - SW Verification:  %.3f ms\r\n", (double)sw_verify_ticks / (CPU_FREQ_MHZ * 1000.0));
    printf(" - HW Verification:  %.3f ms\r\n", (double)hw_verify_ticks / (CPU_FREQ_MHZ * 1000.0));

    if (final_status == XST_SUCCESS) {
        xil_printf("\r\n[FINAL CONCLUSION: ALL PASSED] Functionality is correct and performance data has been collected.\r\n");
    } else {
        xil_printf("\r\n[FINAL CONCLUSION: FAILED] A functional verification step failed.\r\n");
    }

    cleanup_platform();
    return final_status;
}


/******************************************************************************
*
* 辅助函数实现
*
******************************************************************************/
void print_hex(const char *label, const unsigned char *data, size_t len) {
    xil_printf("%s: ", label);
    for (size_t i = 0; i < len; i++) {
        xil_printf("%02x", data[i]);
    }
    xil_printf("\r\n");
}

void init_platform() {
    Xil_ICacheEnable();
    Xil_DCacheEnable();
    xil_printf("Platform initialized (Caches Enabled)\r\n");
}

void cleanup_platform() {
    Xil_DCacheDisable();
    Xil_ICacheDisable();
    xil_printf("Platform cleaned up (Caches Disabled)\r\n");
}
